# -*- coding: utf-8 -*-"""Created on Tue Jul 28 11:04:32 2015@author: lenovo"""from itertools import izip#import sysimport constant as ctimport pylab as pltimport pandas as pdimport tushare as tsimport numpy as npimport time,osimport sqlalchemy as sa from pandas import DataFramefrom sqlalchemy import create_enginefrom datetime import datetime, timedelta#reload(sys)#sys.setdefaultencoding('utf-8')
def set_h_data(start = ct._START_,middle = ct._MIDDLE_,autype="qfq",index=False,retry_count = 3,pause=0): """        1994-2015tushare        tushare    Parameters    ------      return """ _CODE_INDEX = pd.DataFrame({'code':['000001','399001','399006'],'name':['','',''],'c_name':['','','']})    code_index = _CODE_INDEX.set_index('code')    dat = ts.get_industry_classified()    dat = dat.drop_duplicates('code')     engine = create_engine(ct._ENGINE_)    dat.to_sql('code',engine,if_exists ='replace') #     dat = dat.append(code_index)    _time_= pd.period_range(start,middle,freq='Y')  #time[0] 1994-12-31    _start_ = start    i = 0 for code in dat['code'].values:         i+= 1 if dat[dat['code']==code]['c_name'] is "":  #indexTrue            index = True for _end_ in _time_:            _end_ = _end_.strftime('%Y-%m-%d')  print i,code,_end_ try:                _data_ = ts.get_h_data(code,start=_start_,end=_end_,index=index,autype=autype,retry_count=retry_count,pause=pause) #  #_iterables_ = [[code],_data_.index] #multiindex #_index_ = pd.MultiIndex.from_product(_iterables_, names=['code', 'date']) #_data_ = DataFrame(_data_, index= _index_,columns =_data_.columns) if _data_ is not None:                                        _data_['code'] =code                    _data_.to_sql('h_data',engine,if_exists='append') except Exception,e: print e.args[0] pass #continue                       _start_ = _end_ def get_h_data(code):       engine = create_engine(ct._ENGINE_) return pd.read_sql(sa.text('SELECT * FROM h_data where code=:col1'), engine, params={'col1': code},parse_dates=['date'],index_col=['date'])
def set_hist_data(start = None,end = None,ktype = None,retry_count = 3,pause=0): """        ktypetushare        None         ktype = None ,    Parameters    ------      return """    engine = create_engine(ct._ENGINE_)    dat =pd.read_sql_table('code', engine)    dat =dat[dat['c_name']!='']['code'].values    dat = dat.tolist()    dat += ['sh','sz','hs300','sz50','zxb','cyb']    i = 0 if ktype is None:        ktype = ['D','W','M','5','15','30','60'] else:        ktype = [ktype]  for key_item in ktype:        i+= 1 for code in dat:  print i,code,key_item try:                _data_ = ts.get_hist_data(code,start=start,end=end,ktype=key_item,retry_count=retry_count,pause=pause) #  if _data_ is not None:                                        _data_['code'] =code                    _data_.to_sql('hist_data_%s'%key_item,engine,if_exists='append') except Exception,e: print e.args[0] pass #continue          
def get_hist_data(code,ktype="D"): """        hist,    Parameters    ------      return """    engine = create_engine(ct._ENGINE_) return pd.read_sql(sa.text('SELECT * FROM "hist_data_%s" where code=:col1'%ktype), engine, params={'col1': code},parse_dates=['date'],index_col=['date'])
def set_realtime_quotes(code=['sh'],pause = 10): """        codepause.,        9:00--15:00dic{code:dataFrame}      Parameters    ------      return  list[DataFrame] """     engine = create_engine(ct._ENGINE_)    curTime = datetime.now()    startTime = curTime.replace(hour=9, minute=0, second=0, microsecond=0)    endTime = curTime.replace(hour=15, minute=0, second=0, microsecond=0)    delta_s = startTime - curTime    delta_e = endTime - startTime if delta_s > timedelta(0, 0, 0):        time.sleep(delta_s.total_seconds())  elif delta_e <timedelta(0, 0, 0):        time.sleep(delta_s.total_seconds()+86400)     _data_ = {} for items in code:        _data_[items] = DataFrame() while(curTime<endTime): for item in code:             df = ts.get_realtime_quotes(item) #Single stock symbol            _data_[item].append(df)        time.sleep(pause)         curTime = datetime.now()  for ite in code:        _data_[ite].to_sql('realtime_data',engine,if_exists='append') return _data_  print get_hist_data('600051')      def set_stock_basics(): """     Parameters    ------      return """    dat = ts.get_stock_basics()    engine = create_engine(ct._ENGINE_)    dat.to_sql('stock_basics',engine,if_exists ='replace')   