# -*- coding: utf-8 -*-"""Created on Mon Dec 07 21:37:31 2015@author: Administrator"""from pyalgotrade.stratanalyzer import returns,sharpe,drawdown,tradesfrom datetime import datetimeimport pandas as pd import jsonimport numpy as np#  ,getSet      class dataSet(): def __init__(self,myStrategy): self.__myStrategy = myStrategy self.returnsAnalyzer = returns.Returns() self.sharpeRatioAnalyzer = sharpe.SharpeRatio() self.drawdownAnalyzer = drawdown.DrawDown()    self.tradeAyalyzer = trades.Trades()         myStrategy.attachAnalyzer(self.returnsAnalyzer)        myStrategy.attachAnalyzer(self.sharpeRatioAnalyzer)        myStrategy.attachAnalyzer(self.drawdownAnalyzer)        myStrategy.attachAnalyzer(self.tradeAyalyzer)  # def getDefault(self):        __returns = self.getReturns()  #array        __cumulativeReturns = self.getCumulativeReturns()  #array        __sharpRatio = self.getSharpeRatio()        __maxDrawDown = self.getMaxDrawDown() #        __tradeInfo = self.getInfo()  # return{"returns":__returns,"cumulativeReturns":__cumulativeReturns,"sharpRatio":__sharpRatio,"maxDrawDown":__maxDrawDown,"tradeInfo":__tradeInfo}   def getInfo(self): return self.__myStrategy.getInfo() def getTimeSeries(self): return self.__myStrategy.getDateTimeSeries() def getCumulativeReturns(self): return  change_type_toArray(self.returnsAnalyzer.getCumulativeReturns(),timeSeries = self.getTimeSeries()) #,  dataSeries def getReturns(self): return change_type_toArray(self.returnsAnalyzer.getReturns(),timeSeries = self.getTimeSeries())  #  dataSeries def getSharpeRatio(self): return self.sharpeRatioAnalyzer.getSharpeRatio(0.05) # int def getLongestDrawDownDuration(self): return self.drawdownAnalyzer.getLongestDrawDownDuration()  # int def getMaxDrawDown(self): return self.drawdownAnalyzer.getMaxDrawDown() # int def getCount(self): return self.tradeAyalyzer.getCount() # int def getProfitableCount(self): return self.tradeAyalyzer.getProfitableCount()  # int def getUnprofitableCount(self): return self.tradeAyalyzer.getUnprofitableCount() # int def getEvenCount(self): return self.tradeAyalyzer.getEvenCount() #   int def getAll(self):       #pandas to_json ,        info = self.getInfo()        info = info[['date','instrument','id']][info['action']==3]        info['All'] = self.tradeAyalyzer.getAll()         return info  #  dataFrame def getProfits(self): all = self.getAll() return all[all["All"]>0]#  dataFrame def getLosses(self): all = self.getAll() return all[all["All"]<0]#  dataFrame def getAllReturns(self):           info = self.getInfo()        info = info[['date','instrument','id']][info['action']==3]        info['AllReturn'] = self.tradeAyalyzer.getAllReturns()        return info  #  pandas def getPositiveReturns(self):        allReturn = self.getAllReturns() return allReturn[allReturn["AllReturn"]>0]#  dataFrame def getNegativeReturns(self):        allReturn = self.getAllReturns() return allReturn[allReturn["AllReturn"]<0]#  dataFrame def getCommissionsForAllTrades(self): return self.tradeAyalyzer.getCommissionsForAllTrades() #Returns a numpy.array with the commissions for each trade. def getCommissionsForProfitableTrades(self): return self.tradeAyalyzer.getCommissionsForProfitableTrades() def getCommissionsForUnprofitableTrades(self): return self.tradeAyalyzer.getCommissionsForUnprofitableTrades() def getCommissionsForEvenTrades(self): return self.tradeAyalyzer.getCommissionsForEvenTrades() #dataSeriesarray,def change_type_toArray(data,timeSeries = None):     i=0;    result = []    date_time = data.getDateTimes()  #dateTime while(i < len(data)): if timeSeries is None: if date_time[1] is None:                result.append([i,data.__getitem__(i)]) else:                   result.append([date_time[i],data.__getitem__(i)])  # ,Str.strftime('%Y-%m-%d') else: if type(timeSeries)== np.ndarray:                result.append([timeSeries[i][0],data.__getitem__(i)]) # datetime 64 QQ657959571 #print datetime.utcfromtimestamp(timeSeries[i][0].astype(int)) else:                result.append([timeSeries[i],data.__getitem__(i)])  # #print timeSeries[i].strftime('%Y-%m-%d'),data.__getitem__(i)         i+=1 #print result  return  np.array(result).reshape((len(result),2))  